import IGrabber.dzn;
import ISensor.dzn;
import IMotor.dzn;

component Grabber { // GrabberC to avoid name conflict
	requires ISensor presence;
	requires IMotor motor;
	provides IGrabber grabber;
	
	behaviour {
		enum State {initial, grabbing, resetting};
		State state = State.initial;
		
		[state.initial] {
			on grabber.grabDisk(): state = State.grabbing;
		}
		
		[state.grabbing] {
			on presence.detected(): motor.next();
			on motor.finished(): {grabber.finished(); state = State.initial;} 
			on grabber.grabDisk(): {}
			// Below: error state, currently not implemented
			// on optional: {state = State.resetting; motor.reset(); grabber.error();} 
		}
		
		[state.resetting] {
			on motor.finished(): state = State.initial;
			// Below: error state, currently not implemented
			// on optional: state = State.initial;
		}
	}
}
interface iInternalBeltControl {
	in void initialise();		// initialise state after power on
	in void toStackBlack(); 	// request move to black stack
	in void toStackWhite();		// request move to white stack
	in void toEnd();		// request move to end of belt to present order
	out void atBlack();		// reached black stack
	out void atWhite();		// reached white stack
	out void atEnd();			// reached presentation location
	
	behaviour {}
}

interface iSensor {
	in bool sensor();		// input from hardware
	out void detected();	

	
	behaviour {
		on sensor: detected();
	}
}

interface iMotorControl {
	in void initialise();	// startup
	in void goForward();	// request to move belt forwards
	in void goBackward();	// request to move belt backwards
	in void stop();			// request belt to stop movement
	out void forward();		// send signal to hardware to move forward
	out void backward();	// send signal to hardware to move backward
	out void neutral();		// send signal to hardware to stop
	
	
	behaviour {
		enum State { NotReady, Ready };
		enum Direction { Forwards, Backwards, Neutral };
		
		State state = State.NotReady;
		Direction dir = Direction.Neutral;
		
		[state.Ready] {
			on goForward: {dir = Direction.Forwards; forward();}
			on goBackward: {dir = Direction.Backwards; backward();}
			on stop: {dir = Direction.Neutral; neutral();}
			on initialise: illegal;
		}
		
		[State.NotReady] {
			on initialise: {
				dir = Direction.Neutral;
				neutral();
				state = State.Ready;
			}
			
			on goForward, goBackward, stop: illegal;
		}
	}
}

// Wrappers for hand written components
component MotorControl {provides iMotorControl motorControl;}
component SensorBlack {provides iSensor sensorBlack;}
component SensorWhite {provides iSensor sensorWhite;}
component SensorEnd {provides iSensor sensorEnd;}

component InternalBeltControl {
	provides iInternalBeltControl beltControl;
	requires iMotorControl motorControl;
	requires iSensor sensorBlack;
	requires iSensor sensorWhite;
	requires iSensor sensorEnd;
	
	behaviour {
		enum State { Black, White, End, Unknown };
		State state;
		
		on beltControl.initialise: {motorControl.initialise(); state = State.Unknown;}
		
		
		[state.Unknown] {
			on beltControl.toStackBlack: {motorControl.goForward(); state = State.Black;}
			on beltControl.toStackWhite: {motorControl.goForward(); state = State.White;}
			on beltControl.toEnd: {motorControl.goForward(); state = State.End;}
			on sensorBlack.detected, sensorWhite.detected, sensorEnd.detected, beltControl.initialise: illegal;
		}
		[state.Black] {
			on sensorBlack.detected: {
				motorControl.stop(); 
				beltControl.atBlack();
				state = State.Unknown;
			}
			on beltControl.toStackWhite: {motorControl.goForward(); state = State.White;}  
			on beltControl.toEnd: {motorControl.goForward(); state = State.End;} 
			on beltControl.toStackBlack, beltControl.initialise: illegal;
		}
		[state.White] {
			on sensorWhite.detected: {
				motorControl.stop();
				beltControl.atWhite();
				state = State.Unknown;
			}
			on beltControl.toStackBlack: {motorControl.goBackward(); state = State.Black;}  
			on beltControl.toEnd: {motorControl.goForward(); state = State.End;} 
			on beltControl.toStackWhite, beltControl.initialise: illegal;
		}
		[state.End] {
			on sensorEnd.detected: {
				motorControl.stop();
				beltControl.atEnd();
				state = State.Unknown;
			}
			on beltControl.toStackBlack: {motorControl.goBackward(); state = State.Black;}
			on beltControl.toStackWhite: {motorControl.goBackward(); state = State.White;}  
			on beltControl.toEnd, beltControl.initialise: illegal;
		}
	}
}
import IIngest.dzn;
import ISensor.dzn;
import ISortingSystem.dzn;

component SortingRobotSystem
{
	provides IMaster master;

	system
	{
		Master m;
		m.master <=> master;
		
		Sensor factorFloorSensor;
		Timer timeoutTimer;
		factorFloorSensor.sensor <=> m.factoryFloorSensor;
		timeoutTimer.timer <=> m.timeoutTimer;
		
		Ingester i;
		Motor wheelMotor;
		Sensor wheelStopSensor;
		Timer ingestTimer;
		
		i.ingest <=> m.ingest;
		i.wheelMotor <=> wheelMotor.motor;
		i.wheelStopSensor <=> wheelStopSensor.sensor;
		i.timer <=> ingestTimer.timer;
		
		Sensor beltSensorWhite;
		Sensor beltSensorBlack;
		SortingSystem sortingSystem;
		ColourSensor cs;
		Actuator whiteActuator;
		Actuator blackActuator;
		Motor beltMotor;
		Timer sortingTimer;
		sortingSystem.sortingSystem <=> m.sortingSystem;
		sortingSystem.colourSensor <=> cs.colourSensor;
		sortingSystem.beltSensorWhite <=> beltSensorWhite.sensor;
		sortingSystem.beltSensorBlack <=> beltSensorBlack.sensor;
		sortingSystem.whiteActuator <=> whiteActuator.actuator;
		sortingSystem.blackActuator <=> blackActuator.actuator;
		sortingSystem.beltMotor <=> beltMotor.motor;
		sortingSystem.timer <=> sortingTimer.timer;
	}
}

interface IMaster
{
	enum State {Off, Idle, Waiting, Error, IngestingDisk, Sorting};
	
	in void start();
	in void stop();
	in void emergency();
	in void forceWait();
	in void cancelWait();
	in State getState();
	
	behaviour
	{
		State state = State.Off;
		
		on getState: { reply(state); }
		
		[state.Off] {
			on start: {state = State.Idle;}
			on stop: {state = State.Off;}
			on emergency: {state = State.Error;}
			on forceWait: illegal;
			on cancelWait: illegal;	
		}
		
		[state.Idle] {
			on start: {state = State.Idle;}
			on stop: {state = State.Off;}
			on emergency: {state = State.Error;}
			on forceWait: {state = State.Waiting;}
			on cancelWait: illegal;			
		}
		
		[state.Waiting] {
			on start: {state = State.Waiting;}
			on stop: {state = State.Off;}
			on emergency: {state = State.Error;}
			on forceWait: {state = State.Waiting;}
			on cancelWait: {state = State.Idle;}			
		}
		
		[state.Error] {
			on start: illegal;
			on stop: {state = State.Off;}
			on emergency: {state = State.Error;}
			on forceWait: {state = State.Error;}
			on cancelWait: {state = State.Error;}			
		}
		
		[state.IngestingDisk] {
			on start: illegal;
			on stop: illegal;
			on emergency: {state = State.Error;}
			on forceWait: {}
			on cancelWait: {}			
		}
		
		[state.Sorting] {
			on start: illegal;
			on stop: illegal;
			on emergency: {state = State.Error;}
			on forceWait: {}
			on cancelWait: {}			
		}
	}
}

component Master
{
	provides IMaster master;
	requires IIngest ingest;
	requires ISensor factoryFloorSensor;
	requires ITimer timeoutTimer;	
	requires ISortingSystem sortingSystem;

	behaviour
	{
		IMaster.State state = IMaster.State.Off;
		bool waitNext = false;
		Long ingestTimeout = $10000$; // in milliseconds, currently 10 seconds
		Long sortTimeout = $10000$; // in milliseconds, currently 10 seconds
		
		on master.getState(): reply(state);
		on factoryFloorSensor.high(): {}
		
		[state.Off] {
			on master.start(): {state = IMaster.State.Idle;}
			on master.stop(): {state = IMaster.State.Idle;}
			on master.emergency(): {state = IMaster.State.Idle;}
		}
		
		[state.Idle] {
			on master.stop(): {state = IMaster.State.Off;}
			on master.emergency(): {state = IMaster.State.Error;}
			on master.forceWait(): {state = IMaster.State.Waiting;}
			
			on factoryFloorSensor.high(): {
				state = IMaster.State.IngestingDisk;
				ingest.startIngest();
				timeoutTimer.start(ingestTimeout);
			}
		}
		
		[state.Waiting] {
			on master.stop(): {state = IMaster.State.Off;}
			on master.emergency(): {state = IMaster.State.Error;}
			on master.forceWait(): {state = IMaster.State.Waiting;}
			on master.cancelWait(): {state = IMaster.State.Idle;}			
		}
		
		[state.Error] {
			on master.stop(): {state = IMaster.State.Off;}
			on master.emergency(): {state = IMaster.State.Error;}
			on master.forceWait(): {state = IMaster.State.Error;}
			on master.cancelWait(): {state = IMaster.State.Error;}			
		}
		
		[state.IngestingDisk] {
			on master.emergency(): {state = IMaster.State.Error;}
			on master.forceWait(): {waitNext = true;}
			on master.cancelWait(): {waitNext = false;}
			
			on ingest.finished(): {
				state = IMaster.State.Sorting;
				sortingSystem.startSorting();
				timeoutTimer.cancel();
				timeoutTimer.start(sortTimeout);
			}
			
			on timeoutTimer.timeout(): {state = IMaster.State.Error;}			
		}
		
		[state.Sorting] {
			on master.emergency(): {state = IMaster.State.Error;}
			on master.forceWait(): {waitNext = true;}
			on master.cancelWait(): {waitNext = false;}
			
			on sortingSystem.finished(): {
				if (waitNext) {
					waitNext = false;
					state = IMaster.State.Waiting;
				} else {
					state = IMaster.State.Idle;
				}
			}
			
			on timeoutTimer.timeout(): {
				if (waitNext) {
					waitNext = false;
					state = IMaster.State.Waiting;
				} else {
					state = IMaster.State.Idle;
				}
			}			
		}
	}
}

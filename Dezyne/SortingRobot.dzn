import IIngest.dzn;
import ISensor.dzn;
import ISortingSystem.dzn;

component SortingRobotSystem
{
	provides IMaster master;

	system
	{
		Master m;
		Ingester i;
		Sensor sensors;
		SortingSystem sortingSystem;
		
		m.master <=> master;
		i.ingest <=> m.ingest;
		sensors.factoryFloorSensor <=> m.factoryFloorSensor;
		sortingSystem.sortingSystem <=> m.sortingSystem;
		
	}
}

interface IMaster
{
	in void start();
	in void stop();
	in void emergency();
	in void forceWait();
	in void continue();

	behaviour
	{
		on start: {}
		on stop: {}
		on emergency: {}
		on forceWait: {}
		on continue: {}
	}
}

component Master
{
	provides IMaster master;
	requires IIngest ingest;
	requires ISensor factoryFloorSensor;
	requires ISortingSystem sortingSystem;

	behaviour
	{
		enum State {Off, Idle, Waiting, Error, IngestingDisk, Sorting};
		//bool waitNext = false;
		State state = State.Off;

		[state.Off]
		{
			on master.start(): {state = State.Idle;}
			on master.stop(): {}
			on master.emergency(): {}
			on master.forceWait(): {}
			on master.continue(): {}
		}
		[state.Idle]
		{
			on master.start(): {}
			on master.stop(): {state = State.Off;}
			on master.emergency(): {state = State.Error;}
			on master.forceWait(): {state = State.Waiting;} 
			on master.continue(): {}
			
			on factoryFloorSensor.high(): {
				state = State.IngestingDisk;
				ingest.startIngest();
			}
		}
		[state.Waiting] {
			on master.start(): {}
			on master.stop(): {state = State.Off;}
			on master.emergency(): {state = State.Error;}
			on master.forceWait(): {} 
			on master.continue(): {state = State.Idle;}
		}
		[state.Error] {
			on master.start(): {}
			on master.stop(): {state = State.Off;}
			on master.emergency(): {state = State.Error;}
			on master.forceWait(): {}
			on master.continue(): {} 
		}
		[state.IngestingDisk] {
			on master.start(): {}
			on master.stop(): {state = State.Off;}
			on master.emergency(): {state = State.Error;} 
			on master.forceWait(): {
				//waitNext = true;
			}
			on master.continue(): {}
			
			on ingest.finished(): {
				state = State.Sorting;
				sortingSystem.startSorting();
			}
		}
		[state.Sorting] {
			on master.start(): {}
			on master.stop(): {state = State.Off;}
			on master.emergency(): {state = State.Error;} 
			on master.forceWait(): {
			//waitNext = true;
			}
			on master.continue(): {}
			
			on sortingSystem.finished(): {
				//if (waitNext) {
				//	waitNext = false;
				//	state = State.Waiting;
				//} else {
				//	state = State.Idle;
				//}
				state = State.Idle;
			}
		}
	}
}

import internal_belt.dzn;
import Console.dzn;
import Grabber.dzn;
import Sensor.dzn;
import Motor.dzn;

component InternalBelt {
	provides iInternalBeltControl iBeltControl;
	
	system {
		InternalBeltControl beltControl;
		MotorControl m;
		PresSensorWhiteStack sW;
		PresSensorBlackStack sB;
		SensorEnd sE;
		
		iBeltControl <=> beltControl.beltControl;
		beltControl.motorControl <=> m.motorControl;
		beltControl.presSensorBlackStack <=> sB.sensorBlack;
		beltControl.presSensorWhiteStack <=> sW.sensorWhite;
		beltControl.sensorEnd <=> sE.sensorEnd;
	}
}

component SortingRobot {
	provides IController i;
	provides ICom com;
		system {
		InternalBelt belt;
		Reporter reporter;
		Controller controller;
		GrabberSystem grabber;
		
		i <=> controller.i;
		grabber.iGrabber <=> controller.grabber;
		belt.iBeltControl <=> controller.belt;
		reporter.iSateReport <=> controller.reporter;
		controller.com <=> com;
	}
}

component GrabberSystem	 {
	provides IGrabber iGrabber;
	system {
		Grabber grabber;
		Sensor gsensor;
		Motor gmotor;
		
		grabber.grabber <=> iGrabber;		
		grabber.presence <=> gsensor.sensor;
		grabber.motor <=> gmotor.motor;
	}
}

interface ICom {
	out void grab();
	behaviour {
		
	}
}

interface IController {
	in void init();
	in void shutDown();
	behaviour {
		on init: {}
		on shutDown: {}
	}
}

component Controller {
	requires IGrabber grabber;
	requires IReporter reporter;
	requires iInternalBeltControl belt;
	requires ICom com;
	provides IController i;
	behaviour {
		enum Power{On, Off};
		enum Intake{Yes, No};
		
		Power power = Power.Off;
		Intake state = Intake.No;
		
		[power.Off]
			on i.init(): {
				belt.initialise();
				power = Power.On;
				state = Intake.No;
			}
			on i.shutDown(): illegal;
			on com.grab(): illegal;
		
		[power.On]
			on i.init(): illegal;
			on i.shutDown(): {
				// Should be implemented, somehow.
			}
			
		
		[state.No]
			on grabber.finished(): illegal;
			on grabber.error(): illegal;
			on com.grab(): {
				state = Intake.Yes;
			}
		
		[state.Yes]
			on grabber.finished(): {
				state = Intake.No;
			}
			on grabber.error(): {
				state = Intake.No;
				power = Power.Off; // for now
			}
			on com.grab(): {
				state = Intake.No;
			}
			
	}
}
import ILed.dzn;

component Reporter {
	provides IReporter iStateReport;
	system {
		StateReporter r;
		Led led1;
		Led led2;
		Led led3;
		r.iLedW <=> led1.iLed;
		r.iLedR <=> led2.iLed;
		r.iLedD <=> led3.iLed;
		r.iStateReport <=> iStateReport;
	}
}

interface IReporter {
	in void report();
	in void turnOff();
	in void setWaiting();
	in void setReceived();
	in void setDispensing();
	
	behaviour {
		on report: {}
		on turnOff: {}
		on setWaiting: {}
		on setReceived: {}
		on setDispensing: {}
	}
}

component StateReporter {
	provides IReporter iStateReport;
	requires ILed iLedW;
	requires ILed iLedR;
	requires ILed iLedD;
	
	behaviour {
		enum State{Off, Waiting, Received, Dispensing};
		State state = State.Off;
		
		on iStateReport.turnOff(): {
			state = State.Off;
		}
		on iStateReport.setWaiting(): {
			state = State.Waiting;
		}
		on iStateReport.setReceived(): {
			state = State.Waiting;
		}
		on iStateReport.setDispensing(): {
			state = State.Waiting;
		}
		
		[state == State.Off]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOff();
				iLedD.turnOff();
			}
		
		[state == State.Waiting]
			on iStateReport.report(): {
				iLedW.turnOn();
				iLedR.turnOff();
				iLedD.turnOff();
			}
		
		[state == State.Received]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOn();
				iLedD.turnOff();
			}
		
		[state == State.Dispensing]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOff();
				iLedD.turnOn();
			}
	}
	
}

component Reporter {
	provides IReporter iSateReport;
	system {
		SateReporter r;
		Led led1;
		Led led2;
		Led led3;
		r.iLedW <=> led1.iLed;
		r.iLedR <=> led2.iLed;
		r.iLedD <=> led3.iLed;
		r.iStateReport <=> iSateReport;
	}
}

interface IReporter {
	in void report();
	in void setState();
	
	behaviour {
		on report: {}
		on setState: {}
	}
}

component SateReporter {
	provides IReporter iStateReport;
	requires ILed iLedW;
	requires ILed iLedR;
	requires ILed iLedD;
	
	behaviour {
		enum State{Off, Waiting, Received, Dispensing};
		State state = State.Off;
		
		on iStateReport.setState(): {}
		
		[state == State.Off]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOff();
				iLedD.turnOff();
			}
		
		[state == State.Waiting]
			on iStateReport.report(): {
				iLedW.turnOn();
				iLedR.turnOff();
				iLedD.turnOff();
			}
		
		[state == State.Received]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOn();
				iLedD.turnOff();
			}
		
		[state == State.Dispensing]
			on iStateReport.report(): {
				iLedW.turnOff();
				iLedR.turnOff();
				iLedD.turnOn();
			}
	}
	
}


interface ILed {
	enum State {On, Off};
	in void turnOn();
	in void turnOff();
	
	behaviour {
		State state = State.Off;
		on turnOn: {state = State.On;}
		on turnOff: {state = State.Off;}
	}
}

component Led
{
	provides ILed iLed;
}

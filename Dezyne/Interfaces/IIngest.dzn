import ITimer.dzn;
import IMotor.dzn;
import ISensor.dzn;

interface IIngest {
	
	in void startIngest();
	out void finished();
	
	behaviour {
		on startIngest: {}
	}

}

component Ingester {
	provides IIngest ingest;
	requires IMotor wheelMotor;
	requires ISensor wheelStopSensor;
	requires ITimer timer;
	
	behaviour {
		enum State { Idle, Monitoring, Ingesting };
		State state = State.Idle;
		Long delay = $5000$; // in milliseconds, currently 5 seconds
		
		[State.Idle] {
			on ingest.startIngest(): {
				state = State.Monitoring;
				timer.start(delay);
			}
		}
		
		
		[State.Monitoring] {
			on timer.timeout(): {
				state = State.Ingesting;
				wheelMotor.turnOn();
			}
		}
		
		[State.Ingesting] {
			on wheelStopSensor.high(): {
				state = State.Idle;
				wheelMotor.turnOff();
			}
		}
	}
	
}
import ITimer.dzn;
import IColourSensor.dzn;
import ISensor.dzn;
import IActuator.dzn;
import IMotor.dzn;

interface ISortingSystem {
	
	in void startSorting();
	out void finished();
	
	behaviour {
		on startSorting: {}
	}
}

component SortingSystem {
	provides ISortingSystem sortingSystem;
	requires IColourSensor colourSensor;
	requires ISensor beltSensorWhite;
	requires ISensor beltSensorBlack;
	requires IActuator whiteActuator;
	requires IActuator blackActuator;
	requires IMotor beltMotor;
	requires ITimer timer;
	
	behaviour {
		enum State { Idle, AwaitColourScan, SortWhite, SortBlack};
		State state = State.Idle;
		Long delay = $5000$; // in milliseconds, currently 5 seconds
		
		[state.Idle] {
			on sortingSystem.startSorting(): {
				state = State.AwaitColourScan;
			}
		}
		[state.AwaitColourScan] {
			on colourSensor.detectedWhite(): {
				whiteActuator.extend();
				state = State.SortWhite;
			}
			on colourSensor.detectedBlack(): {
				blackActuator.extend();
				state = State.SortBlack;
			}
			on colourSensor.detectedUnknown(): {
				// need some kind of more advanced error handling here
				// maybe wait for both black and white sensor to go high
				// and then start timer or smth
				state = State.Idle;
			}
		}
		[state.SortWhite] {
			on beltSensorWhite.high(): {
				timer.start(delay); // wait {delay} milliseconds
			}
			on timer.timeout(): {
				state = State.Idle;
				whiteActuator.withdraw();
				sortingSystem.finished();
			}
		}
		[state.SortBlack] {
			on beltSensorBlack.high(): {
				timer.start(delay); // wait {delay} milliseconds
			}
			on timer.timeout(): {
				state = State.Idle;
				blackActuator.withdraw();
				sortingSystem.finished();
			}
		}
	}
}
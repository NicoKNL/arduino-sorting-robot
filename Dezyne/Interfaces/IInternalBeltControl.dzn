import IMotorControl.dzn;
import ISensor.dzn;

// NOTE: All sensorEnd related changes have been made by Nico + Davey

interface iInternalBeltControl {
	in void initialise();		// initialise state after power on
	in void toStackBlack(); 	// request move to black stack
	in void toStackWhite();		// request move to white stack
	in void toEnd();		// request move to end of belt to present order
	out void atBlack();		// reached black stack
	out void atWhite();		// reached white stack
	out void atEnd();			// reached presentation location
	
	behaviour {
		enum State { Black, White, End, Unknown };
		State state = State.Unknown;
		
		on initialise: state = State.Unknown;
		
		[state.Unknown] {
			on toStackBlack: state = State.Black;
			on toStackWhite: state = State.White;
			on toEnd: state = State.End;
			on initialise: {}
		}
		[state.Black] {
			on toStackWhite: state = State.White;
			on toEnd: state = State.End;
			on toStackBlack, initialise: {}
		}
		[state.White] {
			on toStackBlack: state = State.Black;
			on toEnd: state = State.End;
			on toStackWhite, initialise: {}
		}
//		[state.End] {
//			on toStackWhite: state = State.White;
//			on toStackBlack: state = State.Black;
//			on toEnd, initialise: {}
//		}
	}
}

component InternalBeltControl {
	provides iInternalBeltControl beltControl;
	requires IMotorControl motorControl;
	requires ISensor presSensorBlackStack;
	requires ISensor presSensorWhiteStack;
//	requires ISensor sensorEnd;
	
	behaviour {
		// assumed order of stacks defined in state, might change later.
		enum Goal { Black, White, End, None };
		enum State { NotReady, Ready };
		
		Goal goal = Goal.None;
		State state = State.NotReady;
		
		[state.NotReady] {
			on beltControl.initialise(): {motorControl.initialise(); state = State.Ready;}
			on beltControl.toStackBlack(), beltControl.toStackWhite(), beltControl.toEnd(),
				presSensorBlackStack.detected(), presSensorWhiteStack.detected(): {}
		}
		[state.Ready] {
			// In case current goal is None, always go forward when getting a new goal
			[goal.None] {
				on beltControl.toStackBlack(): {motorControl.goForward(); goal = Goal.Black;}
				on beltControl.toStackWhite(): {motorControl.goForward(); goal = Goal.White;}
				on beltControl.toEnd(): {motorControl.goForward(); goal = Goal.End;}
				on presSensorBlackStack.detected(), presSensorWhiteStack.detected(), beltControl.initialise(): {}
			}
			[goal.Black] {
				on presSensorBlackStack.detected(): {
					motorControl.stop(); 
					beltControl.atBlack();
					goal = Goal.None;
				}
				on beltControl.toStackWhite(): {motorControl.goForward(); goal = Goal.White;}  
				on beltControl.toEnd(): {motorControl.goForward(); goal = Goal.End;} 
				on beltControl.toStackBlack(), beltControl.initialise(): {}
			}
			[goal.White] {
				on presSensorWhiteStack.detected(): {
					motorControl.stop();
					beltControl.atWhite();
					goal = Goal.None;
				}
				on beltControl.toStackBlack(): {motorControl.goBackward(); goal = Goal.Black;}  
				on beltControl.toEnd(): {motorControl.goForward(); goal = Goal.End;} 
				on beltControl.toStackWhite(), beltControl.initialise(): {}
			}
//			[goal.End] {
//				on sensorEnd.detected(): {
//					motorControl.stop();
//					beltControl.atEnd();
//					goal = Goal.None;
//				}
//				on beltControl.toStackBlack(): {motorControl.goBackward(); goal = Goal.Black;}
//				on beltControl.toStackWhite(): {motorControl.goBackward(); goal = Goal.White;}  
//				on beltControl.toEnd(), beltControl.initialise(): {}
//			}
		}
	}
}